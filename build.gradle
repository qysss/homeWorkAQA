plugins {
    id 'java-library'
    id "io.freefair.lombok" version "6.4.2"
}

repositories {
    mavenCentral()
}

def selenideVersion = '6.9.0',
    junitVersion = '5.9.0'

dependencies {

    testImplementation('org.aspectj:aspectjweaver:1.9.9.1',
        "com.codeborne:selenide:$selenideVersion",
        'io.rest-assured:rest-assured:5.2.0',
        "org.aeonbits.owner:owner:1.0.12",
        "com.github.javafaker:javafaker:1.0.2",
        'org.assertj:assertj-core:3.23.1',
        'com.google.code.gson:gson:2.10',
        'com.opencsv:opencsv:5.7.1',
        "org.junit.jupiter:junit-jupiter:$junitVersion",
        'org.slf4j:slf4j-simple:2.0.3')

}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}